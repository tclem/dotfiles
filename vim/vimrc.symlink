call pathogen#infect()

set nocompatible
filetype off

" Syntax
" ======
syntax on
syntax enable
"set t_Co=256

" General Config
" ==============
let mapleader=","
set gfn=Menlo:h14
set encoding=utf-8
set number                      " Line numbers
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set clipboard=unnamed           " Use system clipboard
set hidden                      " Buffers can exist in the background


" Mouse
" ======
set ttyfast                     " Send more characters for redraws
set mouse=a                     " Enable mouse use in all modes
set ttymouse=xterm


" Search Settings
" ===============
set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set ignorecase
set smartcase
set viminfo='100,f1  " Save up to 100 marks, enable capital marks


" Turn Off Swap Files
" ===================
set noswapfile
set nobackup
set nowritebackup
set backupdir=~/.vim/backup,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim/backup,~/.tmp,~/tmp,/var/tmp,/tmp

" Indentation and Display
" =======================
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

filetype plugin on
filetype indent on

set list listchars=tab:\ \ ,trail:Â·   " Display tabs and trailing spaces visually
set nowrap                            " Don't wrap lines
set linebreak                         " Wrap lines at convenient points

" Folds
" =====
set foldmethod=indent                 " Fold based on indent
set foldnestmax=3                     " Deepest fold is 3 levels
set nofoldenable                      " Don't fold by default
let g:vim_markdown_folding_disabled=1 " Disable code folding for markdown

" Completion
" ==========
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=.git,*.rbc,*.class,.svn
set wildignore+=.DS_Store
set wildignore+=tmp/**,*.so,*.swp,*.zip
set wildignore+=*vim/backups*
let g:ctrlp_custom_ignore = {
  \ 'dir':  'vendor\/(cache|bundle)$\|\.bundle$\|\.tags$'
  \ }

" Scrolling
" =========
" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Status Line
" " ===========
set statusline=                                 " Override default
set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=DTree

" NERDTree
" ========
function! ShowFileInNERDTree()
  if exists("t:NERDTreeBufName")
    NERDTreeFind
  else
    NERDTree
    wincmd l
    NERDTreeFind
  endif
endfunction
map <leader>f :call ShowFileInNERDTree()<cr>

let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>



" Plugin overrides
" ========
" source ~/.vim/autocmd.vim
" source ~/.vim/format.vim
" source ~/.vim/rails.vim
" source ~/.vim/ruby.vim
" source ~/.vim/common.vim
" source ~/.vim/tmux.vim
" source ~/.vim/colors.vim
" source ~/.vim/ctrlp.vim


" Color scheme (solarized of course)
" ========
" let g:solarized_termtrans = 1
" color solarized

" Git Gutter
" ==========
let g:gitgutter_sign_column_always = 1
let g:gitgutter_eager = 0



hi StatusLine ctermfg=5 ctermbg=10 guifg=#6c71c4 guibg=#073642





" CTags
" Because I'm using zsh, I have issues with the default OSX path_helper.
" Youd need to do this to fix: sudo mv /etc/zshenv /etc/zprofile
map <Leader>rt :Dispatch!/opt/boxen/homebrew/bin/ctags --extra=+f -R .<CR><CR>
map <C-\> :tnext<CR>
nnoremap <leader>. :CtrlPTag<cr>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" Golang
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
nmap <C-k> [e
nmap <C-j> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv
vmap <C-k> [egv
vmap <C-j> ]egv

" Use modeline overrides
set modeline
set modelines=10

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

if has("gui_running")
  " Automatically resize splits when resizing MacVim window
  autocmd VimResized * wincmd =
endif

" Fugitive
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gl :Glog<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>

map <Leader>k :Align
map <Leader>kd :Align =><CR>

" Auto save when focus is lost like textmate does
:au FocusLost * silent! wa

" Arduino files are treated like c++ files
:au BufNewFile,BufRead *.pde set filetype=cpp
:au BufNewFile,BufRead *.ino set filetype=cpp

" vim-json: don't hide quotes
let g:vim_json_syntax_conceal = 0
